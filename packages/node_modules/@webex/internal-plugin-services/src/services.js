import Url from 'url';

import {base64} from '@webex/common';
import {WebexPlugin} from '@webex/webex-core';

import ServiceCatalog from './service-catalog';

/* eslint-disable no-underscore-dangle */
/**
 * @class
 */
const Services = WebexPlugin.extend({
  namespace: 'Services',

  _catalogs: new WeakMap(),

  /**
   * **Internal**
   * Get the current catalog based on the assocaited
   * webex instance.
   * @returns {ServiceCatalog}
   */
  _getCatalog() {
    return this._catalogs.get(this.webex);
  },

  /**
   * Generate a service catalog as an object from
   * the associated instance catalog.
   * @param {boolean} [priorityHost] - use highest priority host if set to `true`
   * @param {string} [serviceGroup]
   * @returns {Record<string, string>}
   */
  list(priorityHost, serviceGroup) {
    const catalog = this._getCatalog();

    return catalog.list(priorityHost, serviceGroup);
  },

  /**
   * Get a service url from the current services list by name
   * from the associated instance catalog.
   * @param {string} name
   * @param {boolean} [priorityHost]
   * @param {string} [serviceGroup]
   * @returns {string|undefined}
   */
  get(name, priorityHost, serviceGroup) {
    const catalog = this._getCatalog();

    return catalog.get(name, priorityHost, serviceGroup);
  },

  /**
   * Mark a priority host service url as failed.
   * This will mark the host associated with the
   * `ServiceUrl` to be removed from the its
   * respective host array, and then return the next
   * viable host from the `ServiceUrls` host array,
   * or the `ServiceUrls` default url if no other priority
   * hosts are available, or if `noPriorityHosts` is set to
   * `true`.
   * @param {string} url
   * @param {boolean} noPriorityHosts
   * @returns {string}
   */
  markFailedUrl(url, noPriorityHosts) {
    const catalog = this._getCatalog();

    return catalog.markFailedUrl(url, noPriorityHosts);
  },

  /**
   * Update a list of `serviceUrls` to the most current
   * catalog via the defined `discoveryUrl` then returns the current
   * list of services.
   * @param {string} [by] This accepts `email`, `orgId` or `userId`
   * @param {string} [value] This accepts an email, orgId, or userId
   * @returns {Promise<Array<string>>}
   */
  updateServices(by, value) {
    const catalog = this._getCatalog();
    const serviceGroup = (by && value) ? 'preauth' : 'postauth';
    const params = [];

    if (by && value) {
      params.push(true, by, (by === 'email') ? base64.encode(value) : value);
    }

    return this._fetchNewServiceHostmap(...params)
      .then((serviceHostMap) => {
        catalog.updateServiceUrls(
          serviceGroup,
          serviceHostMap
        );

        return Promise.resolve({
          ...catalog.list(true, serviceGroup)
        });
      });
  },

  /**
   * Wait until the service catalog is available,
   * or reject afte ra timeout of 60 seconds.
   * @param {string} serviceGroup
   * @param {number} [timeout] - in seconds
   * @returns {Promise<void>}
   */
  waitForCatalog(serviceGroup, timeout) {
    const catalog = this._getCatalog();

    return catalog.waitForCatalog(serviceGroup, timeout);
  },

  /**
   *  **Internal**
   * Organize a received hostmap from a service
   * catalog endpoint.
   * @param {object} serviceHostmap
   * @returns {object}
   */
  _formatReceivedHostmap(serviceHostmap) {
    const output = [];
    let item = {};

    Object.keys(serviceHostmap.serviceLinks).forEach((key) => {
      item = {};

      item.name = key;
      item.defaultUrl = serviceHostmap.serviceLinks[key];
      item.hosts = serviceHostmap.hostCatalog[Url.parse(item.defaultUrl).host];

      output.push(item);
    });

    return output;
  },

  /**
   * **Internal**
   * Simplified method wrapper for sending a request to get
   * an updated service hostmap.
   * @param {boolean} [limited]
   * @param {string} [by]
   * @param {string} [value]
   * @returns {Promise<object>}
   */
  _fetchNewServiceHostmap(limited, by, value) {
    const service = 'u2c';
    const limStr = (limited) ? '/limited' : '';
    const qs = {
      format: 'hostmap'
    };

    if (limited) {
      qs[by] = value;
    }

    return this.request({
      method: 'GET',
      service,
      catalog: 'discovery',
      resource: `${limStr}/catalog`,
      qs
    })
      .then(({body}) => Promise.resolve(this._formatReceivedHostmap(body)))
      .catch((e) => Promise.reject(e));
  },

  /**
   * Initializer
   *
   * @instance
   * @memberof Services
   * @returns {Services}
   */
  initialize() {
    this._catalogs.set(this.webex, new ServiceCatalog());

    this.listenToOnce(this.webex, 'ready', () => {
      this.updateServices();
    });
  }
});
/* eslint-enable no-underscore-dangle */

export default Services;
