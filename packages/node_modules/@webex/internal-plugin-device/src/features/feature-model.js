// External dependencies.
import AmpState from 'ampersand-state';
import {defaults, isObject} from 'lodash';

/**
 * Feature model.
 *
 * @description
 * This model contains details on a single feature and is received from the
 * **WDM** service upon registration.
 */
const FeatureModel = AmpState.extend({

  // Ampersand property members.

  props: {
    /**
     * Contains the unique identifier for this feature to be addressed by.
     *
     * @type {string}
     */
    key: 'string',

    /**
     * This property contains the date in which this feature was last modified.
     *
     * @type {date}
     */
    lastModified: 'date',

    /**
     * This property defines whether or not the feature is mutable.
     *
     * @type {boolean}
     */
    mutable: 'boolean',

    /**
     * This property contains the data type the string value should be
     * interpreted as.
     *
     * @type {string}
     */
    type: 'string',

    /**
     * This property contains the string value of this feature.
     *
     * @type {string}
     */
    val: 'string',

    /**
     * This property contains the interpreted value of this feature.
     *
     * @type {any}
     */
    value: 'any'
  },

  /**
   * Class object constructor. This method safely initializes the class object
   * prior to it fully loading to allow data to be accessed and modified
   * immediately after construction instead of initialization.
   *
   * @override
   * @param {object} attrs - An object to map against the feature's properties.
   * @param {object} [options={}] - Ampersand options for `parse` and `parent`.
   */
  constructor(attrs, options = {}) {
    defaults(options, {parse: true});

    return Reflect.apply(
      AmpState.prototype.constructor,
      this,
      [attrs, options]
    );
  },

  // Ampsersand method members.

  /**
   * Parse all attribute values and map them to their appropriate members.
   *
   * @param {FeatureModel} pto - Attributes to be parsed and mapped.
   * @returns {FeatureModel} - Parsed and mapped attributes.
   */
  parse(pto) {
    // Generate a return transfer object.
    let rto = {};

    // Validate that a parameter transfer object was provided.
    if (!pto) {
      return rto;
    }

    // Clone the parameter transfer object into the return transfer object.
    rto = {...pto};

    // Validate that a value was provided.
    if (rto.val) {
      // Validate that the value is a number.
      if (!Number.isNaN(Number(rto.val))) {
        rto.value = Number(rto.val);
        rto.type = 'number';
      }
      // Validate that the value is a `true` boolean.
      else if (rto.val === 'true') {
        rto.value = true;
        rto.type = 'boolean';
      }
      // Validate that the value is a `false` boolean.
      else if (rto.val === 'false') {
        rto.value = false;
        rto.type = 'boolean';
      }
      // Default to the type of a string in all other cases.
      else {
        rto.value = rto.val;
        rto.type = 'string';
      }
    }
    // If no value is provided, set the type to string.
    else {
      // Instantiate a value property.
      rto.value = undefined;
      rto.type = 'string';
    }

    return rto;
  },

  /**
   * Serialize the feature using the parent ampersand method with its date as an
   * ISO string. This converts the feature into a request-transportable object.
   *
   * @override
   * @param  {Record<string,boolean>} [args] - List of properties to serialize.
   * @returns {Object} - The request-ready transport object.
   */
  serialize(...args) {
    // Call the overloaded class member.
    const attrs = Reflect.apply(AmpState.prototype.serialize, this, args);

    // Validate that the overloaded class member returned an object with the
    // `lastModified` key-value pair and instance it as an ISO string.
    if (attrs.lastModified) {
      attrs.lastModified = (new Date(attrs.lastModified).toISOString());
    }

    return attrs;
  },

  /**
   * Set a property of this object to a specific value. This method utilizes
   * code that exists within the `ampersand-state` dependency to handle
   * scenarios in which `key = {"key": "value"}` or
   * `key = "key", value = "value"`. Since the snippet is pulled directly from
   * `ampersand-state`, there is no need to test both scenarios.
   *
   * @override
   * @param {object | string} key - The key value, or object to be set.
   * @param {any} value - The key value or object to set the keyed pair to.
   * @param {any} options - The object to set the keyed pair to.
   * @returns {any} - The changed property.
   */
  set(key, value, options) {
    // Declare formatted output variables for properly setting the targetted
    // property for this method.
    let attrs;
    let optns;

    // Validate if the key is an instance of any object or not.
    if (isObject(key) || key === null) {
      attrs = key;
      optns = value;
    }
    else {
      attrs = {};
      attrs[key] = value;
      optns = options;
    }

    attrs = this.parse(attrs, optns);

    return Reflect.apply(AmpState.prototype.set, this, [attrs, optns]);
  }
});

export default FeatureModel;
