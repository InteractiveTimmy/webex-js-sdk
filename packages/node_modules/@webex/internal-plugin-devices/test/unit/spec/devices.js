import {assert} from '@webex/test-helper-chai';
import {cloneDeep} from 'lodash';
import Devices from '@webex/internal-plugin-devices';
import MockWebex from '@webex/test-helper-mock-webex';

import deviceFixture from './device-fixture';

describe('plugin-devices', () => {
  describe('Devices', () => {
    let webex;
    let devices;

    beforeEach('initialize webex', () => {
      webex = new MockWebex({
        children: {
          devices: Devices
        }
      });

      const deviceConfig = cloneDeep(deviceFixture);

      webex.internal.devices.set(deviceConfig);

      devices = webex.internal.devices;
    });

    describe('#clear()', () => {
      it('clears all features', () => {
        assert.isAbove(devices.features.developer.length, 0);
        devices.clear();
        assert.lengthOf(devices.features.developer, 0);
      });

      it('does not clear the logger', () => {
        assert.property(devices, 'logger');
        assert.isDefined(devices.logger);
        devices.clear();
        assert.property(devices, 'logger');
        assert.isDefined(devices.logger);
      });
    });

    describe('#setLogoutTimer()', () => {
      describe('when the duration is not valid', () => {
        it('returns when it is not set', () => {
          const {logoutTimer} = devices;

          devices.setLogoutTimer();
          assert.equal(devices.logoutTimer, logoutTimer);
        });

        it('returns when it\'s less than or equal to zero', () => {
          const {logoutTimer} = devices;

          devices.setLogoutTimer(-1);
          assert.equal(devices.logoutTimer, logoutTimer);
        });
      });

      describe('when the duration is valid', () => {
        it('sets up a \'change:lastUserActivityDate\' event listener', () => {
          assert(true);
        });

        it('sets the logout timer', () => {
          const {logoutTimer} = devices;

          devices.setLogoutTimer(60000);
          assert.notEqual(devices.logoutTimer, logoutTimer);
        });
      });
    });

    describe('#serialize()', () => {
      it('serializes feature toggles in a format compatible with wdm', () => {
        assert.deepEqual(devices.serialize().features, deviceFixture.features);
      });
    });
  });
});

