import AmpState from 'ampersand-state';

// The credentials config which includes the CI server info and derived
// URL properties from them for the various CI services.  The URL's
// will be updated when the CI changes.
const CredentialsConfig = AmpState.extend({

  // we need to allow extra props for dynamic props like jwtRefreshCallback
  extraProperties: 'allow',
  idbroker: {url: process.env.IDBROKER_BASE_URL || 'https://idbroker.webex.com'},
  identity: {url: process.env.IDENTITY_BASE_URL || 'https://identity.webex.com'},

  props: {
    // idbroker: ['object', false, (() => ({url: process.env.IDBROKER_BASE_URL || 'https://idbroker.webex.com'}))],
    // identity: ['object', false, (() => ({url: process.env.IDENTITY_BASE_URL || 'https://identity.webex.com'}))],

    /**
      * This is the authorization url displayed on the
      * {@link developer portal|https://developer.webex.com}
      * @type {string}
      */
    authorizationString: ['string', false, process.env.WEBEX_AUTHORIZATION_STRING || process.env.AUTHORIZATION_STRING],

    /**
      * {@see https://tools.ietf.org/html/rfc6749#section-4.1.4}
      * @type {string}
      */
    client_id: ['string', false, process.env.WEBEX_CLIENT_ID || process.env.COMMON_IDENTITY_CLIENT_ID || process.env.CLIENT_ID],

    /**
      * {@see https://tools.ietf.org/html/rfc6749#section-4.1.4}
      * @type {string}
      */
    client_secret: ['string', false, process.env.WEBEX_CLIENT_SECRET || process.env.COMMON_IDENTITY_CLIENT_SECRET || process.env.CLIENT_SECRET],

    /**
      * {@see https://tools.ietf.org/html/rfc6749#section-4.1.4}
      * @type {string}
      */
    redirect_uri: ['string', false, process.env.WEBEX_REDIRECT_URI || process.env.COMMON_IDENTITY_REDIRECT_URI || process.env.REDIRECT_URI],

    /**
      * {@see https://tools.ietf.org/html/rfc6749#section-4.1.4}
      * @type {string}
      */
    scope: ['string', false, process.env.WEBEX_SCOPE || process.env.WEBEX_SCOPES || process.env.COMMON_IDENTITY_SCOPE || process.env.SCOPE],

    /**
      * Controls the UI of the CI login page.
      * @private
      * @type {string}
      */
    cisService: ['string', false, 'webex']
  },

  get activationUrl() {
    return `${this.idbroker.url}/idb/token/v1/actions/UserActivation/invoke`;
  },

  get authorizeUrl() {
    return process.env.AUTHORIZE_URL || `${this.idbroker.url}/idb/oauth2/v1/authorize`;
  },

  get tokenUrl() {
    return `${this.idbroker.url}/idb/oauth2/v1/access_token`;
  },

  get revokeUrl() {
    return process.env.REVOKE_URL || `${this.idbroker.url}/idb/oauth2/v1/revoke`;
  },

  get logoutUrl() {
    return `${this.idbroker.url}/idb/oauth2/v1/logout`;
  },

  get setPasswordUrl() {
    return `${this.identity.url || 'https://identity.webex.com'}/identity/scim/v1/Users`;
  },

  /**
   * Sets the webex instance for this instance of credentials
   * @param {object} webex
   * @returns {void}
   */
  setWebex(webex) {
    this.webex = webex;

    this.idbroker = {
      /**
       * Updates the url getter for the prop idbroker
       * to collect from the services catalog if available.
       * @returns {string}
       */
      get url() {
        return webex.internal.services &&
          webex.internal.services.get('idbroker') ?
          webex.internal.services.get('idbroker') :
          process.env.IDBROKER_BASE_URL || 'https://idbroker.webex.com';
      }
    };

    this.identity = {
      /**
       * Updates the url getter for the prop identity
       * to collect from the services catalog if available.
       * @returns {string}
       */
      get url() {
        return webex.internal.services &&
          webex.internal.services.get('identity') ?
          webex.internal.services.get('identity') :
          process.env.IDENTITY_BASE_URL || 'https://identity.webex.com';
      }
    };
  }
});

export default CredentialsConfig;

